!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AAbits	stk_prim.c	1668;"	d	file:
AAlevels	stk_prim.c	1667;"	d	file:
ABS	stk_prim.c	1426;"	d	file:
BACKGROUND	stk_label.h	51;"	d
BOTTOMCENTER	stk_label.h	/^	BOTTOMCENTER,$/;"	e	enum:__anon2
BOTTOMLEFT	stk_label.h	/^	BOTTOMLEFT,$/;"	e	enum:__anon2
BOTTOMRIGHT	stk_label.h	/^	BOTTOMRIGHT$/;"	e	enum:__anon2
CENTER	stk_label.h	/^	CENTER,$/;"	e	enum:__anon2
CENTERLEFT	stk_label.h	/^	CENTERLEFT,$/;"	e	enum:__anon2
CENTERRIGHT	stk_label.h	/^	CENTERRIGHT,$/;"	e	enum:__anon2
CLIP_ACCEPT	BAK/stk_prim.h	7;"	d
CLIP_ACCEPT	stk_prim.c	1140;"	d	file:
CLIP_BOTTOM_EDGE	BAK/stk_prim.h	14;"	d
CLIP_BOTTOM_EDGE	stk_prim.c	1136;"	d	file:
CLIP_INSIDE	BAK/stk_prim.h	9;"	d
CLIP_INSIDE	stk_prim.c	1138;"	d	file:
CLIP_LEFT_EDGE	BAK/stk_prim.h	11;"	d
CLIP_LEFT_EDGE	stk_prim.c	1134;"	d	file:
CLIP_REJECT	BAK/stk_prim.h	8;"	d
CLIP_REJECT	stk_prim.c	1139;"	d	file:
CLIP_RIGHT_EDGE	BAK/stk_prim.h	12;"	d
CLIP_RIGHT_EDGE	stk_prim.c	1135;"	d	file:
CLIP_TOP_EDGE	BAK/stk_prim.h	13;"	d
CLIP_TOP_EDGE	stk_prim.c	1137;"	d	file:
CallbackListNode	stk_signal.h	/^typedef struct CallbackListNode {$/;"	s
CallbackListNode	stk_signal.h	/^} CallbackListNode;$/;"	t	typeref:struct:CallbackListNode
FONT_FILE	stk_font.c	10;"	d	file:
FONT_SIZE	stk_font.c	9;"	d	file:
FOREGROUND	stk_label.h	50;"	d
F_Signal_Callback	stk_signal.h	/^typedef void (*F_Signal_Callback)(STK_Object *object, void *signaldata, void *userdata);$/;"	t
F_Widget_Close	stk_widget.h	/^typedef void	(*F_Widget_Close)	(STK_Widget *widget);$/;"	t
F_Widget_Draw	stk_widget.h	/^typedef void	(*F_Widget_Draw) 	(STK_Widget *widget, SDL_Rect *rect);$/;"	t
HLineAlpha	stk_prim.c	/^int HLineAlpha(SDL_Surface * dst, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color)$/;"	f
LABEL_BOUNCE	stk_label.h	/^    LABEL_BOUNCE,$/;"	e	enum:LabelPattern
LABEL_NORMAL	stk_label.h	/^    LABEL_NORMAL,$/;"	e	enum:LabelPattern
LABEL_SCROLL_LEFT	stk_label.h	/^    LABEL_SCROLL_LEFT,$/;"	e	enum:LabelPattern
LABEL_SCROLL_RIGHT	stk_label.h	/^    LABEL_SCROLL_RIGHT$/;"	e	enum:LabelPattern
LabelPattern	stk_label.h	/^enum LabelPattern$/;"	g
LabelPattern	stk_label.h	/^} LabelPattern;$/;"	v	typeref:enum:LabelPattern
MAX_WIDGET_TYPE	stk_widget.h	68;"	d
M_PI	stk_prim.h	6;"	d
STK_BUTTON_BORDER_THICK	BAK/stk_button.c	10;"	d	file:
STK_BUTTON_DOWN	BAK/stk_button.h	/^	STK_BUTTON_DOWN,$/;"	e	enum:STK_ButtonState
STK_BUTTON_FOCUSED	BAK/stk_button.h	/^	STK_BUTTON_FOCUSED$/;"	e	enum:STK_ButtonState
STK_BUTTON_HIGHLIGHTED	BAK/stk_button.h	/^	STK_BUTTON_HIGHLIGHTED,$/;"	e	enum:STK_ButtonState
STK_BUTTON_UP	BAK/stk_button.h	/^	STK_BUTTON_UP,$/;"	e	enum:STK_ButtonState
STK_Button	BAK/stk_button.h	/^typedef struct STK_Button {$/;"	s
STK_Button	BAK/stk_button.h	/^} STK_Button;$/;"	t	typeref:struct:STK_Button
STK_ButtonClose	BAK/stk_button.c	/^void STK_ButtonClose(STK_Widget *widget)$/;"	f
STK_ButtonDraw	BAK/stk_button.c	/^void STK_ButtonDraw(STK_Widget *widget)$/;"	f
STK_ButtonFillLabel	BAK/stk_button.c	/^void STK_ButtonFillLabel(STK_Widget *widget)$/;"	f
STK_ButtonFilling	BAK/stk_button.c	/^STK_Widget *STK_ButtonFilling(STK_Widget *widget, Uint32 pattern)$/;"	f
STK_ButtonNew	BAK/stk_button.c	/^STK_Widget *STK_ButtonNew(char *caption, Uint16 w, Uint16 h)$/;"	f
STK_ButtonRegisterType	BAK/stk_button.c	/^int STK_ButtonRegisterType()$/;"	f
STK_ButtonState	BAK/stk_button.h	/^typedef enum STK_ButtonState {$/;"	g
STK_ButtonState	BAK/stk_button.h	/^} STK_ButtonState;$/;"	t	typeref:enum:STK_ButtonState
STK_DispatchEvent	stk.c	/^static int STK_DispatchEvent(SDL_Event *event)$/;"	f	file:
STK_EVENT	stk.h	/^	STK_EVENT = SDL_USEREVENT$/;"	e	enum:__anon1
STK_FontAdapter	stk_font.c	/^int STK_FontAdapter( SDL_Rect *rect, char *str)$/;"	f
STK_FontDraw	stk_font.c	/^int STK_FontDraw( SDL_Rect *rect, char *str, SDL_Color *fg, SDL_Color *bg)$/;"	f
STK_FontInit	stk_font.c	/^int STK_FontInit()$/;"	f
STK_Frame	BAK/stk_frame.h	/^typedef struct STK_Frame {$/;"	s
STK_IMAGESTYLE_BORADER_THICK	BAK/stk_image.h	7;"	d
STK_IMAGESTYLE_HORIZONTAL	BAK/stk_image.h	/^	STK_IMAGESTYLE_HORIZONTAL,$/;"	e	enum:STK_ImageStyle
STK_IMAGESTYLE_MATRIX	BAK/stk_image.h	/^	STK_IMAGESTYLE_MATRIX,$/;"	e	enum:STK_ImageStyle
STK_IMAGESTYLE_NORMAL	BAK/stk_image.h	/^	STK_IMAGESTYLE_NORMAL,$/;"	e	enum:STK_ImageStyle
STK_IMAGESTYLE_PICTURE	BAK/stk_image.h	/^	STK_IMAGESTYLE_PICTURE,$/;"	e	enum:STK_ImageStyle
STK_IMAGESTYLE_VERTICAL	BAK/stk_image.h	/^	STK_IMAGESTYLE_VERTICAL,$/;"	e	enum:STK_ImageStyle
STK_IMAGE_EVENT	stk_widget.h	/^	STK_IMAGE_EVENT$/;"	e	enum:__anon3
STK_IMAGE_USERDEFINE	BAK/stk_image.h	5;"	d
STK_Image	BAK/stk_image.h	/^typedef struct STK_Image {$/;"	s
STK_Image	BAK/stk_image.h	/^} STK_Image;$/;"	t	typeref:struct:STK_Image
STK_ImageFillRect	BAK/stk_image.c	/^SDL_Surface *STK_ImageFillRect(SDL_Widget *widget, SDL_Image *image, SDL_Rect *rect, Uint32 pattern, Uint32 n)$/;"	f
STK_ImageStyle	BAK/stk_image.h	/^typedef enum STK_ImageStyle {$/;"	g
STK_ImageStyle	BAK/stk_image.h	/^} STK_ImageStyle;$/;"	t	typeref:enum:STK_ImageStyle
STK_Init	stk.c	/^int STK_Init()$/;"	f
STK_InternalEvent	stk.c	/^static void STK_InternalEvent(SDL_Event *event)$/;"	f	file:
STK_Label	stk_label.h	/^typedef struct STK_Label {$/;"	s
STK_Label	stk_label.h	/^} STK_Label;$/;"	t	typeref:struct:STK_Label
STK_LabelCalculatePattern	stk_label.c	/^static void STK_LabelCalculatePattern(STK_Label *label, SDL_Rect *rect)$/;"	f	file:
STK_LabelClose	stk_label.c	/^int STK_LabelClose(STK_Widget *widget)$/;"	f
STK_LabelDraw	stk_label.c	/^void STK_LabelDraw(STK_Widget *widget, SDL_Rect *area)$/;"	f
STK_LabelGetText	stk_label.c	/^char *STK_LabelGetText(STK_Widget *widget)$/;"	f
STK_LabelNew	stk_label.c	/^STK_Widget *STK_LabelNew( char *str, Uint16 x, Uint16 y )$/;"	f
STK_LabelRegisterType	stk_label.c	/^int STK_LabelRegisterType()$/;"	f
STK_LabelSetAlignment	stk_label.c	/^int STK_LabelSetAlignment(STK_Widget *widget, int alignment)$/;"	f
STK_LabelSetColor	stk_label.c	/^int STK_LabelSetColor(STK_Widget *widget, int which, Uint32 color)$/;"	f
STK_LabelSetText	stk_label.c	/^int STK_LabelSetText(STK_Widget *widget, char * text)$/;"	f
STK_Main	stk.c	/^int STK_Main()$/;"	f
STK_Malloc	stk_mm.c	/^void *STK_Malloc( size_t n )$/;"	f
STK_Object	stk_widget.h	/^typedef void* STK_Object;$/;"	t
STK_PrimBoxColor	stk_prim.c	/^int STK_PrimBoxColor(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)$/;"	f
STK_PrimDrawCircle	stk_prim.c	/^int STK_PrimDrawCircle(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 r, Uint32 color)$/;"	f
STK_PrimDrawLine	stk_prim.c	/^int STK_PrimDrawLine(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)$/;"	f
STK_PrimRectColor	stk_prim.c	/^int STK_PrimRectColor(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)$/;"	f
STK_Quit	stk.c	/^int STK_Quit()$/;"	f
STK_RectIsInside	stk_widget.c	/^int STK_RectIsInside(const SDL_Rect *A, const SDL_Rect *B)$/;"	f
STK_RectIsIntersect	stk_widget.c	/^int STK_RectIsIntersect(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *in)$/;"	f
STK_SignalConnect	stk_signal.c	/^int STK_SignalConnect(STK_Widget *widget, char *signal, F_Signal_Callback callback, void *userdata)$/;"	f
STK_SignalConnectToObject	stk_signal.c	/^static int STK_SignalConnectToObject(STK_Object *object, char *signal, F_Signal_Callback callback, void *userdata)$/;"	f	file:
STK_SignalEmit	stk_signal.c	/^int STK_SignalEmit(STK_Widget *widget, char *signal, void *signaldata)$/;"	f
STK_SignalEmitToObject	stk_signal.c	/^static int STK_SignalEmitToObject(STK_Object *object, char *signal, void *signaldata)$/;"	f	file:
STK_SignalGetListHead	stk_signal.c	/^SignalListNode *STK_SignalGetListHead()$/;"	f
STK_SignalInit	stk_signal.c	/^int STK_SignalInit()$/;"	f
STK_SignalNew	stk_signal.c	/^int STK_SignalNew( char *signal )$/;"	f
STK_WIDGET_BUTTON	stk_widget.h	/^	STK_WIDGET_BUTTON$/;"	e	enum:__anon4
STK_WIDGET_HIDE	stk_widget.h	/^	STK_WIDGET_HIDE = 1,$/;"	e	enum:__anon3
STK_WIDGET_LABEL	stk_widget.h	/^	STK_WIDGET_LABEL = 0,$/;"	e	enum:__anon4
STK_WIDGET_MOVE	stk_widget.h	/^	STK_WIDGET_MOVE,$/;"	e	enum:__anon3
STK_WIDGET_REDRAW	stk_widget.h	/^	STK_WIDGET_REDRAW,$/;"	e	enum:__anon3
STK_WIDGET_RESIZE	stk_widget.h	/^	STK_WIDGET_RESIZE,$/;"	e	enum:__anon3
STK_WIDGET_SHOW	stk_widget.h	/^	STK_WIDGET_SHOW,$/;"	e	enum:__anon3
STK_WINDOW_REALIZE	stk_widget.h	/^	STK_WINDOW_REALIZE,$/;"	e	enum:__anon3
STK_WINDOW_REDRAW	stk_widget.h	/^	STK_WINDOW_REDRAW,$/;"	e	enum:__anon3
STK_Widget	stk_widget.h	/^typedef struct STK_Widget {$/;"	s
STK_Widget	stk_widget.h	/^} STK_Widget;$/;"	t	typeref:struct:STK_Widget
STK_WidgetClose	stk_widget.c	/^int STK_WidgetClose(STK_Widget *widget)$/;"	f
STK_WidgetDraw	stk_widget.c	/^int STK_WidgetDraw(STK_Widget *widget)$/;"	f
STK_WidgetDrawAll	stk_widget.c	/^int STK_WidgetDrawAll()$/;"	f
STK_WidgetEvent	stk_widget.c	/^int STK_WidgetEvent(STK_Widget *widget, SDL_Event *event)$/;"	f
STK_WidgetEventHide	stk_widget.c	/^int STK_WidgetEventHide(STK_Widget *widget)$/;"	f
STK_WidgetEventRedraw	stk_widget.c	/^int STK_WidgetEventRedraw(STK_Widget *widget)$/;"	f
STK_WidgetEventShow	stk_widget.c	/^int STK_WidgetEventShow(STK_Widget *widget)$/;"	f
STK_WidgetFuncs	stk_widget.h	/^typedef struct STK_WidgetFuncs {$/;"	s
STK_WidgetFuncs	stk_widget.h	/^} STK_WidgetFuncs;$/;"	t	typeref:struct:STK_WidgetFuncs
STK_WidgetGetClose	stk_widget.c	/^F_Widget_Close STK_WidgetGetClose( STK_Widget *widget)$/;"	f
STK_WidgetGetDraw	stk_widget.c	/^F_Widget_Draw STK_WidgetGetDraw( STK_Widget *widget)$/;"	f
STK_WidgetGetFuncs	stk_widget.c	/^STK_WidgetFuncs STK_WidgetGetFuncs(STK_Widget *widget)$/;"	f
STK_WidgetGetName	stk_widget.c	/^char *STK_WidgetGetName( STK_Widget *widget )$/;"	f
STK_WidgetGetType	stk_widget.c	/^int STK_WidgetGetType(STK_Widget *widget)$/;"	f
STK_WidgetGetTypeByName	stk_widget.c	/^int STK_WidgetGetTypeByName( char *id )$/;"	f
STK_WidgetInit	stk_widget.c	/^int STK_WidgetInit()$/;"	f
STK_WidgetInitType	stk_widget.c	/^int STK_WidgetInitType()$/;"	f
STK_WidgetIsActive	stk_widget.c	/^int STK_WidgetIsActive(STK_Widget *widget)$/;"	f
STK_WidgetIsInside	stk_widget.c	/^int STK_WidgetIsInside(STK_Widget *widget, int x, int y)$/;"	f
STK_WidgetListNode	stk_widget.h	/^typedef struct STK_WidgetListNode {$/;"	s
STK_WidgetListNode	stk_widget.h	/^} STK_WidgetListNode;$/;"	t	typeref:struct:STK_WidgetListNode
STK_WidgetRegisterType	stk_widget.c	/^int STK_WidgetRegisterType( char *id, STK_WidgetFuncs **f )$/;"	f
STK_WidgetSetDims	stk_widget.c	/^int STK_WidgetSetDims(STK_Widget *widget, Sint16 x, Sint16 y, Sint16 w, Sint16 h)$/;"	f
STK_WidgetType	stk_widget.h	/^typedef struct STK_WidgetType {$/;"	s
STK_WidgetType	stk_widget.h	/^} STK_WidgetType;$/;"	t	typeref:struct:STK_WidgetType
STK_Window	stk_window.h	/^typedef struct STK_Window {$/;"	s
STK_Window	stk_window.h	/^} STK_Window;$/;"	t	typeref:struct:STK_Window
STK_WindowAddWidget	stk_window.c	/^int STK_WindowAddWidget(STK_Widget *widget)$/;"	f
STK_WindowBlitTo	stk_window.c	/^int STK_WindowBlitTo(STK_Window *win, SDL_Rect *des_r, SDL_Surface *src, SDL_Rect *src_r)$/;"	f
STK_WindowClose	stk_window.c	/^int STK_WindowClose()$/;"	f
STK_WindowCreateSubSurface	stk_window.c	/^SDL_Surface *STK_WindowCreateSubSurface(SDL_Surface *sur, SDL_Rect *rect)$/;"	f
STK_WindowCreateWidgetSurface	stk_window.c	/^int STK_WindowCreateWidgetSurface(STK_Widget *widget)$/;"	f
STK_WindowDrawBox	stk_window.c	/^int STK_WindowDrawBox(STK_Window *win, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)$/;"	f
STK_WindowDrawCircle	stk_window.c	/^int STK_WindowDrawCircle(STK_Window *win, Sint16 x, Sint16 y, Sint16 r, Uint32 color)$/;"	f
STK_WindowDrawLine	stk_window.c	/^int STK_WindowDrawLine(STK_Window *win, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)$/;"	f
STK_WindowDrawRect	stk_window.c	/^int STK_WindowDrawRect(STK_Window *win, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)$/;"	f
STK_WindowEvent	stk_window.c	/^int STK_WindowEvent( SDL_Event *event )$/;"	f
STK_WindowEventRealize	stk_window.c	/^int STK_WindowEventRealize()$/;"	f
STK_WindowEventRedraw	stk_window.c	/^int STK_WindowEventRedraw()$/;"	f
STK_WindowFillRect	stk_window.c	/^int STK_WindowFillRect(STK_Window *win, SDL_Rect *rect, Uint32 color)$/;"	f
STK_WindowGetFocusWidget	stk_window.c	/^STK_Widget *STK_WindowGetFocusWidget()$/;"	f
STK_WindowGetMouseState	stk_window.c	/^int STK_WindowGetMouseState( int *x, int *y )$/;"	f
STK_WindowGetTop	stk_window.c	/^STK_Window *STK_WindowGetTop()$/;"	f
STK_WindowGetWidgetList	stk_window.c	/^STK_WidgetListNode *STK_WindowGetWidgetList()$/;"	f
STK_WindowInit	stk_window.c	/^int STK_WindowInit()$/;"	f
STK_WindowNew	stk_window.c	/^STK_Window *STK_WindowNew( Sint16 x, Sint16 y, Sint16 width, Sint16 height)$/;"	f
STK_WindowOpen	stk_window.c	/^int STK_WindowOpen()$/;"	f
STK_WindowRealize	stk_window.c	/^int STK_WindowRealize()$/;"	f
STK_WindowRedraw	stk_window.c	/^int STK_WindowRedraw()$/;"	f
STK_WindowRemoveWidget	stk_window.c	/^STK_Widget *STK_WindowRemoveWidget(STK_Widget *widget)$/;"	f
STK_WindowSetFocusWidget	stk_window.c	/^int STK_WindowSetFocusWidget(STK_Widget *fw)$/;"	f
STK_WindowSetWidgetList	stk_window.c	/^int STK_WindowSetWidgetList(STK_WidgetListNode *wl)$/;"	f
STK_WindowUpdateRect	stk_window.c	/^int STK_WindowUpdateRect( Sint16 x, Sint16 y, Sint16 w, Sint16 h)$/;"	f
SignalListNode	stk_signal.h	/^typedef struct SignalListNode {$/;"	s
SignalListNode	stk_signal.h	/^} SignalListNode;$/;"	t	typeref:struct:SignalListNode
TOPCENTER	stk_label.h	/^	TOPCENTER,$/;"	e	enum:__anon2
TOPLEFT	stk_label.h	/^	TOPLEFT,$/;"	e	enum:__anon2
TOPRIGHT	stk_label.h	/^	TOPRIGHT,$/;"	e	enum:__anon2
TRANSPARANT	stk_label.h	49;"	d
VLineAlpha	stk_prim.c	/^int VLineAlpha(SDL_Surface * dst, Sint16 x, Sint16 y1, Sint16 y2, Uint32 color)$/;"	f
WIDGET_DESTROY	stk_widget.h	65;"	d
WIDGET_FOCUSABLE	stk_widget.h	62;"	d
WIDGET_REALIZED	stk_widget.h	63;"	d
WIDGET_VISIBLE	stk_widget.h	64;"	d
_SDL_PRIM_H_	stk_prim.h	2;"	d
_STK_BUTTON_H_	BAK/stk_button.h	2;"	d
_STK_FONT_H_	stk_font.h	2;"	d
_STK_FRAME_H_	BAK/stk_frame.h	2;"	d
_STK_H_	stk.h	2;"	d
_STK_IMAGE_H_	BAK/stk_image.h	2;"	d
_STK_LABEL_H_	stk_label.h	2;"	d
_STK_MM_H_	stk_mm.h	2;"	d
_STK_PRIM_H_	BAK/stk_prim.h	2;"	d
_STK_SIGNAL_H_	stk_signal.h	2;"	d
_STK_WIDGET_H_	stk_widget.h	2;"	d
_STK_WINDOW_H_	stk_window.h	2;"	d
_filledRectAlpha	stk_prim.c	/^int _filledRectAlpha(SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)$/;"	f
_putPixelAlpha	stk_prim.c	/^int _putPixelAlpha(SDL_Surface * surface, Sint16 x, Sint16 y, Uint32 color, Uint8 alpha)$/;"	f
aacircleColor	stk_prim.c	/^int aacircleColor(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 r, Uint32 color)$/;"	f
aacircleRGBA	stk_prim.c	/^int aacircleRGBA(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 rad, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
aaellipseColor	stk_prim.c	/^int aaellipseColor(SDL_Surface * dst, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint32 color)$/;"	f
aaellipseRGBA	stk_prim.c	/^int aaellipseRGBA(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
aalineColor	stk_prim.c	/^int aalineColor(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)$/;"	f
aalineColorInt	stk_prim.c	/^int aalineColorInt(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, int draw_endpoint)$/;"	f
aalineRGBA	stk_prim.c	/^int aalineRGBA(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
aapolygonColor	stk_prim.c	/^int aapolygonColor(SDL_Surface * dst, Sint16 * vx, Sint16 * vy, int n, Uint32 color)$/;"	f
aapolygonRGBA	stk_prim.c	/^int aapolygonRGBA(SDL_Surface * dst, Sint16 * vx, Sint16 * vy, int n, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
aatrigonColor	stk_prim.c	/^int aatrigonColor(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint32 color)$/;"	f
aatrigonRGBA	stk_prim.c	/^int aatrigonRGBA(SDL_Surface * dst,  Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3,$/;"	f
absolute	stk_widget.h	/^	SDL_Rect absolute;	\/\/ ??$/;"	m	struct:STK_Widget
alignment	stk_label.h	/^	int alignment;$/;"	m	struct:STK_Label
area	BAK/stk_frame.h	/^	STK_Image *area[8];$/;"	m	struct:STK_Frame
bezierColor	stk_prim.c	/^int bezierColor(SDL_Surface * dst, Sint16 * vx, Sint16 * vy, int n, int s, Uint32 color)$/;"	f
bezierRGBA	stk_prim.c	/^int bezierRGBA(SDL_Surface * dst, Sint16 * vx, Sint16 * vy, int n, int s, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
bgcolor	BAK/stk_image.h	/^	Uint32 bgcolor;$/;"	m	struct:STK_Image
bgcolor	stk_label.h	/^	Uint32  bgcolor;$/;"	m	struct:STK_Label
bgcolor	stk_window.h	/^	Uint32 bgcolor;$/;"	m	struct:STK_Window
bm	stk_widget.h	/^	int lm, rm, tm, bm;$/;"	m	struct:STK_Widget
boxRGBA	stk_prim.c	/^int boxRGBA(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
call_list	stk_signal.h	/^	struct CallbackListNode *call_list;$/;"	m	struct:SignalListNode	typeref:struct:SignalListNode::CallbackListNode
callback	stk_signal.h	/^	F_Signal_Callback callback;$/;"	m	struct:CallbackListNode
caption	stk_label.h	/^	char *caption;$/;"	m	struct:STK_Label
child	stk_widget.h	/^	struct STK_Widget *child;		\/\/ point to the child widget of this widget$/;"	m	struct:STK_WidgetListNode	typeref:struct:STK_WidgetListNode::STK_Widget
circleRGBA	stk_prim.c	/^int circleRGBA(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 rad, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
cleanup	stk_font.c	/^static void cleanup(int exitcode)$/;"	f	file:
clip	stk_widget.h	/^	SDL_Rect clip;		\/\/ ??$/;"	m	struct:STK_Widget
clipEncode	BAK/stk_prim.c	/^static int clipEncode(Sint16 x, Sint16 y, Sint16 left, Sint16 top, Sint16 right, Sint16 bottom)$/;"	f	file:
clipEncode	stk_prim.c	/^static int clipEncode(Sint16 x, Sint16 y, Sint16 left, Sint16 top, Sint16 right, Sint16 bottom)$/;"	f	file:
clipLine	BAK/stk_prim.c	/^static int clipLine(SDL_Surface *dst, Sint16 *x1, Sint16 *y1, Sint16 *x2, Sint16 *y2)$/;"	f	file:
clipLine	stk_prim.c	/^static int clipLine(SDL_Surface * dst, Sint16 * x1, Sint16 * y1, Sint16 * x2, Sint16 * y2)$/;"	f	file:
clip_xmax	stk_prim.c	12;"	d	file:
clip_xmin	stk_prim.c	11;"	d	file:
clip_ymax	stk_prim.c	14;"	d	file:
clip_ymin	stk_prim.c	13;"	d	file:
close	stk_widget.h	/^	F_Widget_Close		close;$/;"	m	struct:STK_WidgetFuncs
draw	stk_widget.h	/^	F_Widget_Draw 		draw;$/;"	m	struct:STK_WidgetFuncs
draw_label	test/main.c	/^STK_Widget *draw_label()$/;"	f
ellipseColor	stk_prim.c	/^int ellipseColor(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)$/;"	f
ellipseRGBA	stk_prim.c	/^int ellipseRGBA(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
evaluateBezier	stk_prim.c	/^double evaluateBezier (double *data, int ndata, double t) $/;"	f
fastPixelColor	stk_prim.c	/^int fastPixelColor(SDL_Surface * dst, Sint16 x, Sint16 y, Uint32 color)$/;"	f
fastPixelColorNolock	stk_prim.c	/^int fastPixelColorNolock(SDL_Surface * dst, Sint16 x, Sint16 y, Uint32 color)$/;"	f
fastPixelColorNolockNoclip	stk_prim.c	/^int fastPixelColorNolockNoclip(SDL_Surface * dst, Sint16 x, Sint16 y, Uint32 color)$/;"	f
fastPixelRGBA	stk_prim.c	/^int fastPixelRGBA(SDL_Surface * dst, Sint16 x, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
fastPixelRGBANolock	stk_prim.c	/^int fastPixelRGBANolock(SDL_Surface * dst, Sint16 x, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
fgcolor	stk_label.h	/^	Uint32  fgcolor;$/;"	m	struct:STK_Label
filename	BAK/stk_image.h	/^	char *filename;		\/\/ filename to load a picture$/;"	m	struct:STK_Image
filledEllipseColor	stk_prim.c	/^int filledEllipseColor(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)$/;"	f
filledEllipseRGBA	stk_prim.c	/^int filledEllipseRGBA(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
filledPolygonColor	stk_prim.c	/^int filledPolygonColor(SDL_Surface * dst, Sint16 * vx, Sint16 * vy, int n, int color)$/;"	f
filledPolygonRGBA	stk_prim.c	/^int filledPolygonRGBA(SDL_Surface * dst, Sint16 * vx, Sint16 * vy, int n, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
filledRectAlpha	stk_prim.c	/^int filledRectAlpha(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)$/;"	f
filledTrigonColor	stk_prim.c	/^int filledTrigonColor(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, int color)$/;"	f
filledTrigonRGBA	stk_prim.c	/^int filledTrigonRGBA(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3,$/;"	f
filledpieColor	stk_prim.c	/^int filledpieColor(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 rad, Sint16 start, Sint16 end, Uint32 color)$/;"	f
filledpieRGBA	stk_prim.c	/^int filledpieRGBA(SDL_Surface * dst, Sint16 x, Sint16 y, Sint16 rad,$/;"	f
fillstyle	BAK/stk_image.h	/^	STK_ImageStyle fillstyle;	$/;"	m	struct:STK_Image
flag	BAK/stk_button.h	/^	Uint32 flag;$/;"	m	struct:STK_Button
flags	BAK/stk_image.h	/^	Uint32 flags;$/;"	m	struct:STK_Image
flags	stk_widget.h	/^	Uint32 flags;		\/\/ important flag value variable$/;"	m	struct:STK_Widget
focus_widget	stk_window.h	/^	STK_Widget *focus_widget;$/;"	m	struct:STK_Window
font	stk_font.c	/^TTF_Font *font;$/;"	v
funcs	stk_widget.h	/^	STK_WidgetFuncs	funcs;$/;"	m	struct:STK_WidgetType
g_image_dividing_horizontal	BAK/stk_image.c	/^Uint32 g_image_dividing_horizontal[2][2][2] = {$/;"	v
g_image_dividing_matrix	BAK/stk_image.c	/^Uint32 g_image_dividing_matrix[2][4][4] = {$/;"	v
g_image_dividing_vertical	BAK/stk_image.c	/^Uint32 g_image_dividing_vertical[2][2][2] = {$/;"	v
g_window	stk_window.c	/^static STK_Window *g_window = NULL;$/;"	v	file:
g_wlist	stk_widget.c	/^static struct STK_WidgetType g_wlist[MAX_WIDGET_TYPE];$/;"	v	typeref:struct:STK_WidgetType	file:
gfxPrimitivesCompareInt	stk_prim.c	/^int gfxPrimitivesCompareInt(const void *a, const void *b)$/;"	f
gfxPrimitivesPolyAllocated	stk_prim.c	/^static int gfxPrimitivesPolyAllocated = 0;$/;"	v	file:
gfxPrimitivesPolyInts	stk_prim.c	/^static int *gfxPrimitivesPolyInts = NULL;$/;"	v	file:
height	stk_label.h	/^	int height;$/;"	m	struct:STK_Label
hlineColor	BAK/stk_prim.c	/^int hlineColor(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color)$/;"	f
hlineColor	stk_prim.c	/^int hlineColor(SDL_Surface * dst, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color)$/;"	f
hlineColorStore	stk_prim.c	/^int hlineColorStore(SDL_Surface * dst, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color)$/;"	f
hlineRGBA	stk_prim.c	/^int hlineRGBA(SDL_Surface * dst, Sint16 x1, Sint16 x2, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
hlineRGBAStore	stk_prim.c	/^int hlineRGBAStore(SDL_Surface * dst, Sint16 x1, Sint16 x2, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
id	stk_widget.h	/^	char *id;$/;"	m	struct:STK_WidgetType
image	BAK/stk_button.h	/^	STK_Image image;$/;"	m	struct:STK_Button
increase	stk_label.h	/^	int increase;$/;"	m	struct:STK_Label
inside	stk_widget.h	/^	int inside;		\/\/ ??$/;"	m	struct:STK_Widget
label	BAK/stk_button.h	/^	STK_Widget *label;$/;"	m	struct:STK_Button
lineRGBA	stk_prim.c	/^int lineRGBA(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
lm	stk_widget.h	/^	int lm, rm, tm, bm;$/;"	m	struct:STK_Widget
main	test/main.c	/^int main(int argc,char **argv)$/;"	f
main	test/test2/test2.c	/^int main(int argc,char **argv)$/;"	f
my_mutex	stk_widget.c	/^static SDL_mutex *my_mutex;$/;"	v	file:
name	stk_widget.h	/^	char *name;		\/\/ name of this widget$/;"	m	struct:STK_Widget
next	stk_signal.h	/^	struct CallbackListNode *next;$/;"	m	struct:CallbackListNode	typeref:struct:CallbackListNode::CallbackListNode
next	stk_signal.h	/^	struct SignalListNode *next;$/;"	m	struct:SignalListNode	typeref:struct:SignalListNode::SignalListNode
next	stk_widget.h	/^	struct STK_WidgetListNode *next;	\/\/ point to the next widget of this widget (on the same window)$/;"	m	struct:STK_WidgetListNode	typeref:struct:STK_WidgetListNode::STK_WidgetListNode
object	stk_signal.h	/^	STK_Object *object;$/;"	m	struct:CallbackListNode
offset	stk_label.h	/^	int offset;$/;"	m	struct:STK_Label
parent	stk_widget.h	/^	struct STK_Widget *parent;		\/\/ point to the parent widget of this widget$/;"	m	struct:STK_WidgetListNode	typeref:struct:STK_WidgetListNode::STK_Widget
pattern	stk_label.h	/^	int pattern;$/;"	m	struct:STK_Label
pixelColor	stk_prim.c	/^int pixelColor(SDL_Surface * dst, Sint16 x, Sint16 y, Uint32 color)$/;"	f
pixelColorNolock	stk_prim.c	/^int pixelColorNolock(SDL_Surface * dst, Sint16 x, Sint16 y, Uint32 color)$/;"	f
pixelColorWeight	stk_prim.c	/^int pixelColorWeight(SDL_Surface * dst, Sint16 x, Sint16 y, Uint32 color, Uint32 weight)$/;"	f
pixelColorWeightNolock	stk_prim.c	/^int pixelColorWeightNolock(SDL_Surface * dst, Sint16 x, Sint16 y, Uint32 color, Uint32 weight)$/;"	f
pixelRGBA	stk_prim.c	/^int pixelRGBA(SDL_Surface * dst, Sint16 x, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
polygonColor	stk_prim.c	/^int polygonColor(SDL_Surface * dst, Sint16 * vx, Sint16 * vy, int n, Uint32 color)$/;"	f
polygonRGBA	stk_prim.c	/^int polygonRGBA(SDL_Surface * dst, Sint16 * vx, Sint16 * vy, int n, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
rect	stk_widget.h	/^	SDL_Rect rect;		\/\/ the rect area this widget occupy$/;"	m	struct:STK_Widget
rectangleRGBA	stk_prim.c	/^int rectangleRGBA(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
redraw_timer	stk_label.h	/^	SDL_TimerID redraw_timer;$/;"	m	struct:STK_Label
rm	stk_widget.h	/^	int lm, rm, tm, bm;$/;"	m	struct:STK_Widget
signal	stk_signal.h	/^	char *signal;$/;"	m	struct:SignalListNode
slist_head	stk_signal.c	/^static SignalListNode *slist_head = NULL;$/;"	v	file:
state	BAK/stk_button.h	/^	STK_ButtonState state;$/;"	m	struct:STK_Button
stk_frame_new	BAK/stk_frame.c	/^int stk_frame_new(STk_Widget *widget)$/;"	f
stk_prim_drawCircle	BAK/stk_prim.c	/^int stk_prim_drawCircle(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 r, Uint32 color)$/;"	f
stk_prim_drawLine	BAK/stk_prim.c	/^int stk_prim_drawLine(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)$/;"	f
surface	stk_widget.h	/^	SDL_Surface *surface;	\/\/ the surface drawn on is this widget$/;"	m	struct:STK_Widget
tm	stk_widget.h	/^	int lm, rm, tm, bm;$/;"	m	struct:STK_Widget
trigonColor	stk_prim.c	/^int trigonColor(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint32 color)$/;"	f
trigonRGBA	stk_prim.c	/^int trigonRGBA(SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3,$/;"	f
type	stk_signal.h	/^	int type;$/;"	m	struct:SignalListNode
type	stk_widget.h	/^	int type;		\/\/ identify the type of this widget, to index this type's other characters.$/;"	m	struct:STK_Widget
type	stk_window.h	/^	Uint8 type;$/;"	m	struct:STK_Window
userdata	stk_signal.h	/^	void *userdata;$/;"	m	struct:CallbackListNode
visible	stk_label.h	/^	int visible;$/;"	m	struct:STK_Label
visible	stk_window.h	/^	int visible;$/;"	m	struct:STK_Window
vlineColor	BAK/stk_prim.c	/^int vlineColor(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 y2, Uint32 color)$/;"	f
vlineColor	stk_prim.c	/^int vlineColor(SDL_Surface * dst, Sint16 x, Sint16 y1, Sint16 y2, Uint32 color)$/;"	f
vlineRGBA	stk_prim.c	/^int vlineRGBA(SDL_Surface * dst, Sint16 x, Sint16 y1, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f
widget	BAK/stk_button.h	/^	STK_Widget widget;$/;"	m	struct:STK_Button
widget	stk_label.h	/^	STK_Widget widget;$/;"	m	struct:STK_Label
widget	stk_widget.h	/^	STK_Widget *widget;			\/\/ point to a widget$/;"	m	struct:STK_WidgetListNode
widget	stk_window.h	/^	STK_Widget widget;$/;"	m	struct:STK_Window
widget_list	stk_window.h	/^	STK_WidgetListNode *widget_list;$/;"	m	struct:STK_Window
width	BAK/stk_frame.h	/^	Uint16 width;$/;"	m	struct:STK_Frame
